
@{
    ViewData["Title"] = "Nueva atracción turística";
}
@model NewAttractionViewModel
<h3>Nueva atracción turística</h3>
<form asp-action="Add" method="post">
    @if (ViewBag.Added ?? false)
    {

        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <p>Atracción turística registrada exitosamente</p>

            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>

    }
    <div class="form-row">
        @if (ViewData.ModelState.Any(x => x.Value.Errors.Any()))
        {
            // Bootstrap 2 = "alert-error", Bootstrap 3 and 4 = "alert-danger"
            <div class="alert alert-danger alert-dismissible fade show">
                @Html.ValidationSummary(false, "Errores de validación:")
                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>

            </div>
        }
        <div class="form-group col-md-5">
            <label name="CountryId" for="countrySelect">País</label>
            <select asp-items="@(new SelectList(Model.Countries, "IsoNumericCode", "Name"))" onchange="onCountrySelected(this)" required class="form-control">
                <option value="">Seleccione un país</option>
            </select>
        </div>
        <div class="form-group offset-md-1 col-md-5">
            <label for="Attraction_CityId">Ciudad</label>
            <select asp-for="@Model.Attraction.CityId" required class="form-control">
                <option value="">Seleccione una ciudad</option>
            </select>
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-5">
            <label for="Attraction_Name">Nombre de la atracción turística</label>
            <input type="text" asp-for="@Model.Attraction.Name" required class="form-control" />
        </div>
        <div class="form-group offset-md-1 col-md-5">

            <label for="Attraction_Address">Dirección de la atracción turística</label>
            <textarea asp-for="@Model.Attraction.Address" required class="form-control"></textarea>
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-5">

            <label for="Attraction_Geoposition_Latitude">Latitud</label>
            <input type="number" step="0.000000000000001" asp-for="@Model.Attraction.Geoposition.Latitude" required class="form-control" />
        </div>
        <div class="form-group offset-md-1 col-md-5">
            <label for="Attraction_Geoposition_Longitude">Longitud</label>
            <input type="number" step="0.000000000000001" asp-for="@Model.Attraction.Geoposition.Longitude" required class="form-control" />
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-5">
            <label for="Attraction_GooglePlaceId">Google Place Id</label>
            <input type="text" asp-for="@Model.Attraction.GooglePlaceId" required class="form-control" />
        </div>
        <div class="form-group offset-md-1 col-md-5">
            <label name="Attraction_CategoryId" for="countrySelect">Categoría</label>
            <select asp-for="@Model.Attraction.CategoryId" asp-items="@(new SelectList(Model.Categories, "Id", "Name"))" required class="form-control">
                <option value="">Seleccione una categoría</option>
            </select>
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-5">
            <label for="Attraction_WebsiteUrl">URL Sitio web</label>
            <input type="text" asp-for="@Model.Attraction.WebsiteUrl" class="form-control" />
        </div>
        <div class="form-group offset-md-1 col-md-5">
            <label for="Attraction_PhoneNumber">Número de teléfono para la atracción</label>
            <input type="text" asp-for="@Model.Attraction.PhoneNumber" class="form-control" />
        </div>

    </div>
    <div class="form-row">
        <div class="form-group col-md-5">
            <label for="Attraction_Rating">Rating</label>
            <input type="number" step="0.01" asp-for="@Model.Attraction.Rating" class="form-control" />
        </div>
    </div>
    <button type="submit" class="btn btn-primary">Registrar</button>
</form>
<br />
<script>
      // This example displays an address form, using the autocomplete feature
      // of the Google Places API to help users fill in the information.

      // This example requires the Places library. Include the libraries=places
      // parameter when you first load the API. For example:
      // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

    function onCountrySelected(countryInput) {
        //set here logic for charging from ajax the countries
        $.ajax({
            type: "GET",
            url: "/TouristAttraction/GetCitiesByCountry?countryId="+countryInput.value,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                
                $('#Attraction_CityId').empty();
                $('#Attraction_CityId').append('<option value="">Seleccione una ciudad</option>');
                $.each(data, function (i, item) {
                 
                    var optionTag= '<option value="'+item.id+'">'+item.name+'</option>'
                    
                    $('#Attraction_CityId').append(optionTag);
                }); //End of foreach Loop   
            }, //End of AJAX Success function  

            failure: function (data) {
                //
                alert(data.responseText);
            }, //End of AJAX failure function  
            error: function (data) {
                alert(data.responseText);
            } //End of AJAX error function  

        });    

    }

      var placeSearch, autocomplete;
      var componentForm = {
        street_number: 'short_name',
        route: 'long_name',
        locality: 'long_name',
        administrative_area_level_1: 'short_name',
        country: 'long_name',
        postal_code: 'short_name'
      };

      function initAutocomplete() {
        // Create the autocomplete object, restricting the search to geographical
        // location types.
        autocomplete = new google.maps.places.Autocomplete(
            
            (document.getElementById('Attraction_Name')),
            {types: []});
        autocomplete.setFields([
          'formatted_address',
          'geometry',
          'id',
          'icon',
          'international_phone_number',
          'name',
          'place_id',
          'rating',
          'website'
          ]);
        // When the user selects an address from the dropdown, populate the address
        // fields in the form.
        autocomplete.addListener('place_changed', fillInSelectionData);
      }

      function fillInSelectionData() {
        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();
          console.log(place);
          $("#Attraction_Address").val(place.formatted_address);
          $("#Attraction_Geoposition_Latitude").val(place.geometry.location.lat);
          $("#Attraction_Geoposition_Longitude").val(place.geometry.location.lng);
          $("#Attraction_GooglePlaceId").val(place.place_id);
          $("#Attraction_PhoneNumber").val(place.international_phone_number);
          $("#Attraction_Name").val(place.name);
          $("#Attraction_Rating").val(place.rating);
          $("#Attraction_WebsiteUrl").val(place.website);
          
      }

      //// Bias the autocomplete object to the user's geographical location,
      //// as supplied by the browser's 'navigator.geolocation' object.
      //function geolocate() {
      //  if (navigator.geolocation) {
      //    navigator.geolocation.getCurrentPosition(function(position) {
      //      var geolocation = {
      //        lat: position.coords.latitude,
      //        lng: position.coords.longitude
      //      };
      //      var circle = new google.maps.Circle({
      //        center: geolocation,
      //        radius: position.coords.accuracy
      //      });
      //      autocomplete.setBounds(circle.getBounds());
      //    });
      //  }
      //}
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=@(ViewBag.Key)&libraries=places&callback=initAutocomplete"
        async defer></script>